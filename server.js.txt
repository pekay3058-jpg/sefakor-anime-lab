// server.js
// Usage: set REPLICATE_API_TOKEN and per-style REPLICATE_MODEL_{STYLE} (see README below)
import express from 'express';
import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();
const app = express();
app.use(express.json({ limit: '50mb' }));
app.use(express.static('.')); // serve index.html from same folder

const REP_TOKEN = process.env.REPLICATE_API_TOKEN;
if(!REP_TOKEN){
  console.warn('WARNING: REPLICATE_API_TOKEN not set. Set it in env before starting the server.');
}

/**
 * Helper: create a prediction on Replicate, then poll until complete
 * modelRef should be like "owner/model:version"
 */
async function createPredictionAndWait(modelRef, input) {
  const createResp = await fetch('https://api.replicate.com/v1/predictions', {
    method: 'POST',
    headers: {
      'Authorization': `Token ${REP_TOKEN}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      version: modelRef,
      input
    })
  });
  if(!createResp.ok){
    const txt = await createResp.text();
    throw new Error('Replicate create failed: '+txt);
  }
  const createJson = await createResp.json();
  const id = createJson.id;
  // poll
  while(true){
    await new Promise(r=>setTimeout(r, 2000));
    const poll = await fetch(`https://api.replicate.com/v1/predictions/${id}`, {
      headers: { 'Authorization': `Token ${REP_TOKEN}` }
    });
    const pj = await poll.json();
    if(pj.status === 'succeeded' && pj.output){
      // many models return an array of URLs in pj.output
      return pj.output;
    }
    if(pj.status === 'failed') {
      throw new Error('Prediction failed: ' + JSON.stringify(pj));
    }
    // otherwise continue polling
  }
}

app.post('/api/stylize', async (req, res) => {
  try{
    const { image, style } = req.body;
    if(!image || !style) return res.status(400).json({ ok:false, error:'Missing image or style' });

    // look up model ref from env e.g. REPLICATE_MODEL_ANIME
    const key = 'REPLICATE_MODEL_' + style.toUpperCase();
    const modelRef = process.env[key];
    if(!modelRef) return res.status(500).json({ ok:false, error:`Server not configured for style ${style}. Set env ${key}` });

    // Build input — many image->image models accept 'image' or 'init_image' etc.
    // We'll attempt 'image' and include `prompt` fallback from env var REPLICATE_PROMPT_{STYLE} if provided.
    const input = { image };
    const promptEnv = process.env['REPLICATE_PROMPT_' + style.toUpperCase()];
    if(promptEnv) input.prompt = promptEnv;

    const outputs = await createPredictionAndWait(modelRef, input);
    // outputs is typically an array of URL(s) — return first
    const first = Array.isArray(outputs) ? outputs[0] : outputs;
    return res.json({ ok:true, image: first });
  }catch(err){
    console.error('stylize error', err);
    return res.status(500).json({ ok:false, error: err.message });
  }
});

// start
const port = process.env.PORT || 5000;
app.listen(port, ()=>console.log(`Sefakor proxy running on http://localhost:${port}`));